package vibeshopbot.services;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class OrderService {
    private static final String ORDERS_FILE = "orders.txt";

    public static void saveOrder(String orderData) {
        System.out.println("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...");

        FileWriter writer = null;
        try {
            File file = new File(ORDERS_FILE);
            System.out.println("üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: " + file.getAbsolutePath());

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            File parentDir = file.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs();
            }

            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!file.exists()) {
                if (file.createNewFile()) {
                    System.out.println("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: " + file.getAbsolutePath());
                } else {
                    System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª");
                    return;
                }
            }

            writer = new FileWriter(file, true); // append mode

            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

            writer.write("=== –ù–ê–ß–ê–õ–û –ó–ê–ö–ê–ó–ê ===\n");
            writer.write("–í—Ä–µ–º—è: " + timestamp + "\n");
            writer.write(orderData + "\n");
            writer.write("=== –ö–û–ù–ï–¶ –ó–ê–ö–ê–ó–ê ===\n\n");
            writer.flush();

            System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª");

        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    System.out.println("‚úÖ –§–∞–π–ª –∑–∞–∫—Ä—ã—Ç");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    File file = new File(ORDERS_FILE);
                    System.out.println("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: " + file.length() + " bytes");
                    System.out.println("üìä –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + file.exists());

                } catch (IOException e) {
                    System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
                }
            }
        }
    }

    public static List<String> getOrders() {
        List<String> orders = new ArrayList<>();
        File file = new File(ORDERS_FILE);

        System.out.println("üìñ –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑: " + file.getAbsolutePath());
        System.out.println("üìä –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + file.exists());

        if (!file.exists()) {
            System.out.println("üì¶ –§–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return orders;
        }

        System.out.println("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " + file.length() + " bytes");

        if (file.length() == 0) {
            System.out.println("üì¶ –§–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç");
            return orders;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            StringBuilder currentOrder = new StringBuilder();
            boolean readingOrder = false;

            while ((line = reader.readLine()) != null) {
                if (line.trim().equals("=== –ù–ê–ß–ê–õ–û –ó–ê–ö–ê–ó–ê ===")) {
                    readingOrder = true;
                    currentOrder = new StringBuilder();
                } else if (line.trim().equals("=== –ö–û–ù–ï–¶ –ó–ê–ö–ê–ó–ê ===")) {
                    if (readingOrder) {
                        orders.add(currentOrder.toString());
                        System.out.println("üìã –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: " + currentOrder.toString().substring(0, Math.min(50, currentOrder.length())) + "...");
                    }
                    readingOrder = false;
                } else if (readingOrder) {
                    currentOrder.append(line).append("\n");
                }
            }

            System.out.println("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: " + orders.size());

        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage());
            e.printStackTrace();
        }
        return orders;
    }
}